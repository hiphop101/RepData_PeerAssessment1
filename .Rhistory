geom_smooth(method = "lm")
ggplot(result,aes(as.factor(year),Emissions/1000)) +
geom_bar(stat="identity",fill="light blue") +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (,000 Tons)")) +
labs(title=expression("PM"[2.5]*" Coal Combustion Source Emissions Across US from 1999-2008"))
ggplot(result,aes(as.factor(year),Emissions/1000)) +
geom_bar(stat="identity",fill="light blue") +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (,000 Tons)")) +
labs(title=expression("PM"[2.5]*" Emissions from Coal Combustion Across US from 1999 to 2008"))
SCC %>% filter(grepl('motor', ignore.case = TRUE))
SCC %>% filter(grepl('motor', SCC.Level.One, ignore.case = TRUE))
SCC %>% filter(grepl('motor', Two, ignore.case = TRUE))
SCC %>% filter(grepl('motor', SCC.Level.Two, ignore.case = TRUE))
SCC %>% filter(grepl('motor', SCC.Level.Three, ignore.case = TRUE))
SCC %>% filter(grepl('motor', SCC.Level.Four, ignore.case = TRUE))
sccList <- SCC %>% filter(grepl('motor', SCC.Level.Three, ignore.case = TRUE) %>%
sccList <- SCC %>% filter(grepl('motor', SCC.Level.Three, ignore.case = TRUE)) %>%
select(SCC)
sccList <- SCC %>% filter(grepl('motor', SCC.Level.Three, ignore.case = TRUE)) %>%
select(SCC)
sccList
result <- NEI %>% filter(SCC %in% sccList$SCC)
ggplot(result,aes(as.factor(year),Emissions/1000)) +
geom_bar(stat="identity",fill="light blue") +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (,000 Tons)")) +
labs(title=expression("PM"[2.5]*" Emissions from Coal Combustion Across US from 1999 to 2008"))
sccList <- SCC %>% filter(grepl('motor', SCC.Level.Three, ignore.case = TRUE)) %>%
filter(24510, fips) %>%
select(SCC)
result <- NEI %>% filter(SCC %in% sccList$SCC) %>% filter(24510, fips) %>%
ggplot(result,aes(as.factor(year),Emissions/1000)) +
geom_bar(stat="identity",fill="light blue") +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (,000 Tons)")) +
labs(title=expression("PM"[2.5]*" Emissions from Motor Vehcile Across US from 1999 to 2008"))
result <- NEI %>% filter(SCC %in% sccList$SCC) %>% filter(24510, fips)
result <- NEI %>% filter(SCC %in% sccList$SCC) %>% filter('24510', fips)
class(NEI$fips)
result <- NEI %>% filter(SCC %in% sccList$SCC) %>% filter(fips, '24510')
result <- NEI %>% filter(SCC %in% sccList$SCC) %>% filter(fips=='24510')
ggplot(result,aes(as.factor(year),Emissions/1000)) +
geom_bar(stat="identity",fill="light blue") +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (,000 Tons)")) +
labs(title=expression("PM"[2.5]*" Emissions from Motor Vehcile Across US from 1999 to 2008"))
sccList <- SCC %>% filter(grepl('vehcile', EI.Sector, ignore.case = TRUE)) %>%
select(SCC)
result <- NEI %>% filter(SCC %in% sccList$SCC) %>% filter(fips=='24510')
ggplot(result,aes(as.factor(year),Emissions/1000)) +
geom_bar(stat="identity",fill="light blue") +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (,000 Tons)")) +
labs(title=expression("PM"[2.5]*" Emissions from Motor Vehcile Across US from 1999 to 2008"))
sccList
sccList <- SCC %>% filter(grepl('vehcile', EI.Sector, ignore.case = TRUE)) %>%
select(SCC)
sccList <- SCC %>% filter(grepl('vehicile', EI.Sector, ignore.case = TRUE)) %>%
select(SCC)
sccList
sccList <- SCC %>% filter(grepl('vehicle', EI.Sector, ignore.case = TRUE)) %>%
select(SCC)
sccList <- SCC %>% filter(grepl('vehicle', EI.Sector, ignore.case = TRUE)) %>%
select(SCC)
result <- NEI %>% filter(SCC %in% sccList$SCC) %>% filter(fips=='24510')
ggplot(result,aes(as.factor(year),Emissions/1000)) +
geom_bar(stat="identity",fill="light blue") +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (,000 Tons)")) +
labs(title=expression("PM"[2.5]*" Emissions from Motor Vehcile Across US from 1999 to 2008"))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
swirl()
cmat
plot(x)
nxt()
points(cx,cy,col=c('red','orange','purple'),pch=3,cex=2,lwd=2)
nxt()
swirl()
cmat
a
x
cx
cy
points(cx,cy,col=c('red','orange','purple'),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
x
apply(distTmp, 2, which.min)
cols1
newClust
cols1[newClust]
points(x,y,pch=19,cex=2,col=cols1[newClust])
x
newClust
tapply(x, newClust, mean)
tapply(y, newClust, mean)
x
newCx
points(newCx, newCy, col=cols1,pch=8, cex=2, lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2, 2, which.min)
x
points(x,y,pch=19,cex=2,col=cols1[newClust2])
x
x
newClust2
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
a
x
points(finalCx, finalCy, col=cols1,pch=9, cex=2, lwd=2)
a
x
kmeans(dataFrame, centers=3)
kmObj$iter
kmObj$cluster
plot(x,y,col=kmObj$cluster,pch=19,ces=2)
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers, col=c('black','red','green'),pch=3,cex=3,lwd=3)
x
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
x
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
a
x
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
wd_path <- '/Users/tonychen/Dropbox/Study/Coursera/ReproducibleResearch-Proj1'
setwd(wd_path)
activityData <- read.csv('activity.csv')
activityData
View(activityData)
library(zoo)
set.seed(1)
m <- matrix(runif(16, 0, 100), nrow = 4)
missing_values <- sample(16, 7)
m[missing_values] <- NA
m
na.approx(m)
m[4,4] <- 50
m
na.approx(m)
m
m[4,3] <- 50
m
na.approx(m)
str(activityData)
class(activityData)
?read.csv
activityData$date <- as.Date(activityData$date, '%Y-%m-%d')
str(activityData)
View(activityData)
View(activityData)
naData <- activityData[activityData$steps==NA,]
naData
naData <- activityData[is.na(activityData$steps),]
naData
activityData[activityData$date=='2012-10-08',]
activityData[activityData$date=='2012-10-08' & activityData$steps!=NA,]
activityData[activityData$date=='2012-10-08' & !is.na(activityData$steps),]
activityData[activityData$date=='2012-10-08' & is.na(activityData$steps),]
activityData[activityData$date=='2012-10-01' & is.na(activityData$steps),]
activityData[activityData$date=='2012-10-01' & !is.na(activityData$steps),]
activityData[is.na(activityData$steps),]
# Process NA. Since we don't have data for both 10-01 and 10-08, we put 0 steps
activityData[is.na(activityData$steps),] <- 0
# Process NA. Since we don't have data for both 10-01 and 10-08, we put 0 steps
activityData[is.na(activityData$steps),1] <- 0
View(activityData)
library(dplyr)
activityData %>% group_by(activityData$date, sum)
activityData %>% group_by(activityData$date, sum())
activityData
activityData %>% group_by(activityData$date) %>%
summarise(sum=interval)
activityData %>% group_by(activityData$date) %>%
summarise(totalInterval=sum(interval))
x <- activityData %>% group_by(activityData$date) %>%
summarise(totalInterval=sum(interval))
View(x)
rst1 <- activityData %>% group_by(activityData$date) %>%
summarise(totalSteps=sum(steps))
View(rst1)
hist(rst1$totalSteps)
par(mar=c(3,3,3,3))
hist(rst1$totalSteps)
par(mar=c(4,4,3,3))
hist(rst1$totalSteps)
par(mar=c(4,4,4,4))
hist(rst1$totalSteps)
par(mar=c(4,4,3,3))
hist(rst1$totalSteps)
par(mar=c(5,5,3,3))
hist(rst1$totalSteps)
hist(rst1$totalSteps, xlab='total steps')
rst3Mean <- activityData %>% group_by(activityData$date) %>%
summarise(totalSteps=mean(steps))
rst3Mean
View(rst3Mean)
View(activityData)
View(rst3Mean)
rst3Mean <- activityData %>% group_by(activityData$date) %>%
summarise(totalSteps=mean(steps), median=median(steps))
rst3Mean
rst3Mean <- activityData %>% group_by(activityData$date) %>%
summarise(Mean Steps=mean(steps), median=median(steps))
rst3Mean <- activityData %>% group_by(activityData$date) %>%
summarise(MeanSteps=mean(steps), median=median(steps))
rst3Mean <- activityData %>% group_by(activityData$date) %>%
summarise(mean=mean(steps), median=median(steps))
rst3Mean
rst3Mean <- activityData %>% group_by(activityData$date) %>%
summarise(median=median(steps))
rst3Mean
rst3Mean <- activityData %>% group_by(activityData$date) %>%
summarise(mean=mean(steps), max=median(steps))
rst3Mean <- activityData %>% group_by(activityData$date) %>%
summarise(mean=mean(steps), max=max(steps))
rst3Mean
rst3Mean <- activityData %>% group_by(activityData$date) %>%
summarise(mean=mean(steps), median=median(steps))
rst3Mean
activityData[activityData$date='2012-10-03']
activityData[activityData$date='2012-10-03',]
activityData[activityData$date=='2012-10-03',]
# Time series plot of the average number of steps taken
rst4Mean <- activityData %>% group_by(activityData$date) %>%
summarise(mean=mean(steps))
# Time series plot of the average number of steps taken
rst4Mean <- activityData %>% group_by(activityData$date) %>%
summarise(mean=mean(steps))
plot(rst4Mean$steps)
qplot(rst4Mean$steps)
?qplot
qplot(y=rst4Mean$steps, x=rst4Mean$date)
rst4Mean
qplot(y=rst4Mean[,1], x=rst4Mean[,2])
xyplot(y=rst4Mean[,1], x=rst4Mean[,2])
rst4Mean[,1]
rst4Mean[,2]
qplot(y=rst4Mean[,1], x=rst4Mean[,2])
# 5. The 5-minute interval that, on average, contains the maximum number of steps
activityData
head(activityData)
rst5 <- activityData %>% group_by(activityData$date) %>%
summarise(max=mean(steps))
rst5
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <- activityData %>% group_by(activityData$date) %>%
summarise(interval, max=mean(steps))
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <- activityData %>% group_by(activityData$date) %>%
summarise(intervals, max=mean(steps))
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <- activityData %>% group_by(activityData$date) %>%
summarise(interval, max=mean(steps))
activityData %>% group_by(activityData$date)
?summarise
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <- activityData %>% group_by(activityData$date, activityData$interval) %>%
summarise(max=mean(steps))
rst5
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <- activityData %>%
group_by(activityData$date) %>%
summarise(max=mean(steps))
activityData %>%
group_by(activityData$date) %>%
summarise(max=mean(steps))
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <- activityData %>%
group_by(activityData$date) %>%
summarise(disp=interval ,max=mean(steps))
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <- activityData %>%
group_by(activityData$date) %>%
summarise(max=mean(steps))
activityData %>%
group_by(activityData$date) %>%
summarise(max=mean(steps))
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <- activityData %>%
group_by(activityData$date) %>%
summarise(s=max(steps))
activityData %>%
group_by(activityData$date) %>%
summarise(s=max(steps))
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <- activityData %>%
group_by(activityData$date) %>%
summarise(max=max(steps), interval)
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <- activityData %>%
group_by(activityData$date, activityData$interval) %>%
summarise(max=max(steps))
rst5
activityData %>%
group_by(activityData$date) %>%
summarise(max=max(interval))
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <- activityData %>%
group_by(activityData$date) %>%
summarise(max=max(steps),n=n())
activityData %>%
group_by(activityData$date) %>%
summarise(max=max(steps),n=n())
rst5 <- activityData %>%
group_by(activityData$date) %>%
summarise(max=max(steps),n=n(interval))
activityData %>%
group_by(activityData$date) %>%
summarise(max=max(steps),disp=(interval))
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <- activityData %>%
group_by(activityData$interval) %>%
summarise(max=max(steps),disp=(interval))
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <- activityData %>%
group_by(activityData$interval) %>%
summarise(max=max(steps))
rst5
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <- activityData %>%
group_by(activityData$date) %>%
summarise(max=max(steps))
# 5. The 5-minute interval that, on average, contains the maximum number of steps
#rst5 <-
activityData %>%
group_by(activityData$date) %>%
summarise(max=max(steps))
# 5. The 5-minute interval that, on average, contains the maximum number of steps
#rst5 <-
activityData %>%
group_by(activityData$date)
# 5. The 5-minute interval that, on average, contains the maximum number of steps
#rst5 <-
activityData %>%
group_by(activityData$date) %>%
mutate(maxValue=max(interval))
# 5. The 5-minute interval that, on average, contains the maximum number of steps
#rst5 <-
activityData %>%
group_by(activityData$date) %>%
mutate(maxValue=max(steps))
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <-
activityData %>%
group_by(activityData$date) %>%
mutate(maxValue=max(steps))
View(rst5)
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <-
activityData %>%
group_by(activityData$date) %>%
mutate(maxValue=max(steps)) %>%
ungroup()
View(rst5)
activityData %>%
group_by(activityData$date) %>%
filter(maxValue=max(steps))
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <-
activityData %>%
group_by(activityData$date) %>%
filter(steps==max(steps))
rst5
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <-
activityData %>%
group_by(activityData$date) %>%
filter(steps==max(steps))
rst5
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <-
activityData %>%
group_by(date) %>%
filter(steps==max(steps))
rst5
activityData %>%
group_by(date)
activityData %>%
group_by(date) %>%
filter(steps==max(steps))
# 5. The 5-minute interval that, on average, contains the maximum number of steps
rst5 <-
activityData %>%
group_by(date) %>%
slice(which.max(steps))
rst5
activityData <- read.csv('activity.csv')
activityData$date <- as.Date(activityData$date, '%Y-%m-%d')
# 6. Code to describe and show a strategy for imputing missing data
# Process NA. Since we don't have data for both 10-01 and 10-08, we put 0 steps
activityDataImputedNA <- activityData[is.na(activityData$steps),1] <- 0
activityData <- read.csv('activity.csv')
activityData$date <- as.Date(activityData$date, '%Y-%m-%d')
# 2. Histogram of the total number of steps taken each day
rst2 <- activityData %>% group_by(activityData$date) %>%
summarise(totalSteps=sum(steps))
View(rst1)
par(mar=c(5,5,3,3))
hist(rst1$totalSteps, xlab='Total Steps')
# 6. Code to describe and show a strategy for imputing missing data
# Process NA. Since we don't have data for both 10-01 and 10-08, we put 0 steps
activityData[is.na(activityData$steps),1] <- 0
hist(rst1$totalSteps, xlab='Total Steps')
# 6. Code to describe and show a strategy for imputing missing data
# Process NA. Since we don't have data for both 10-01 and 10-08, we put 0 steps
activityData[is.na(activityData$steps),1] <- 0
hist(rst1$totalSteps, xlab='Total Steps')
hist(rst1$totalSteps, xlab='Total Steps')
wd_path <- '/Users/tonychen/Documents/GitHub/RepData_PeerAssessment1'
setwd(wd_path)
# 4. Time series plot of the average number of steps taken
rst4Mean <- activityData %>% group_by(activityData$date) %>%
summarise(mean=mean(steps))
qplot(y=rst4Mean[,1], x=rst4Mean[,2])
# 4. Time series plot of the average number of steps taken
rst4Mean <- activityData %>% group_by(activityData$date) %>%
summarise(mean=mean(steps))
qplot(y=rst4Mean[,1], x=rst4Mean[,2])
rst4Mean
qplot(y=rst4Mean[,1], x=rst4Mean[,2])
plot(y=rst4Mean[,1], x=rst4Mean[,2])
plot(row.names(rst4Mean), rst4Mean, type='l')
plot(row.names(rst4Mean), rst4Mean$mean, type='l')
View(rst4Mean)
# 4. Time series plot of the average number of steps taken
rst4Mean <- activityData %>% group_by(activityData$interval) %>%
summarise(mean=mean(steps))
plot(row.names(rst4Mean), rst4Mean$mean, type='l')
plot(row.names(rst4Mean), rst4Mean$mean, type='l',
main='Daily Activity Pattern', xlab='Interval', ylab='Number of Steps')
plot(row.names(rst4Mean), rst2_2$mean, type='l',
main='Daily Activity Pattern', xlab='Interval', ylab='Number of Steps')
# 4. Time series plot of the average number of steps taken
rst2_2 <- activityData %>% group_by(activityData$interval) %>%
summarise(mean=mean(steps))
plot(row.names(rst4Mean), rst2_2$mean, type='l',
main='Daily Activity Pattern', xlab='Interval', ylab='Number of Steps')
rst2_2 <- activityData %>% group_by(activityData$interval) %>%
summarise(mean=mean(steps))
rst2_2
plot(row.names(rst2_2), rst2_2$mean, type='l',
main='Daily Activity Pattern', xlab='Interval', ylab='Number of Steps', ylim = 200)
rst2_2 <- activityData %>% group_by(activityData$interval) %>%
summarise(mean=mean(steps))
plot(row.names(rst2_2), rst2_2$mean, type='l',
main='Daily Activity Pattern', xlab='Interval', ylab='Number of Steps', ylim = 200)
plot(row.names(rst2_2), rst2_2$mean, type='l',
main='Daily Activity Pattern', xlab='Interval', ylab='Number of Steps', ylim = 200)
plot(row.names(rst2_2), rst2_2$mean, type='l',
main='Daily Activity Pattern', xlab='Interval', ylab='Number of Steps', ylim = '200')
plot(row.names(rst2_2), rst2_2$mean, type='l',
main='Daily Activity Pattern', xlab='Interval', ylab='Number of Steps')
# 4. Time series plot of the average number of steps taken
rst2_2 <- activityData %>% group_by(activityData$interval) %>%
summarise(mean=mean(steps))
rst2_2
plot(x=rst2_2$mean, type="l",
main="Daily Activity Pattern", xlab="Interval", ylab="Number of Steps")
plot(x=rst2_2$mean, type='l',
main='Daily Activity Pattern', xlab='Interval', ylab='Number of Steps', na.rm=TRUE)
rst2_2
plot(y=rst2_2$`activityData$interval`,x=rst2_2$mean, type="l",
main="Daily Activity Pattern", xlab="Interval", ylab="Number of Steps")
plot(x=rst2_2$`activityData$interval`,y=rst2_2$mean, type="l",
main="Daily Activity Pattern", xlab="Interval", ylab="Number of Steps")
plot(x=rst2_2$`activityData$interval`,y=rst2_2$mean, type="l",
main="Daily Activity Pattern", xlab="Interval", ylab="Number of Steps")
plot(x=rst2_2$`activityData$interval`,y=rst2_2$mean, type="l",
main="Daily Activity Pattern", xlab="Interval", ylab="Number of Steps", ylim=c(0,200))
plot(rst2_2$mean, type="l",
main="Daily Activity Pattern", xlab="Interval", ylab="Number of Steps", ylim=c(0,200))
rst2_2$mean
View(rst4Mean)
plot(rst2_2$mean, type="l",
main="Daily Activity Pattern", xlab="Interval", ylab="Number of Steps", ylim=c(0,200))
plot(x=rst2_2$mean, type='l',
main='Daily Activity Pattern', xlab='Interval', ylab='Number of Steps', ylim = c(0,200))
rst2_2 <- activityData %>% group_by(activityData$interval) %>%
summarise(mean=mean(steps))
plot(x=rst2_2$mean, type='l',
main='Daily Activity Pattern', xlab='Interval', ylab='Number of Steps', ylim = c(0,200))
plot(x=c(1,2,32,3,1,31,2,31,23,), type='l',
main='Daily Activity Pattern', xlab='Interval', ylab='Number of Steps', ylim = c(0,200))
rst2_2 <- activityData %>% group_by(activityData$interval) %>%
summarise(mean=mean(steps))
activityData %>% group_by(activityData$interval) %>%
summarise(mean=mean(steps))
activityData %>% group_by(activityData$interval) %>%
summarise(mean=mean(steps)) %>%
max(mean)
activityData %>% group_by(activityData$interval) %>%
summarise(mean=mean(steps)) %>%
max(mean(steps))
activityData %>% group_by(activityData$interval) %>%
summarise(mean=mean(steps)) %>%
max(max=max(steps))
activityData %>% group_by(activityData$interval) %>%
summarise(mean=mean(steps)) %>%
summarise(max=max(steps))
activityData %>% group_by(activityData$interval) %>%
summarise(mean=mean(steps))
activityData %>% group_by(activityData$interval) %>%
summarise(meanSteps=mean(steps)) %>%
filter(meanSteps=max(meanSteps))
activityData %>% group_by(activityData$interval) %>%
summarise(meanSteps=mean(steps)) %>%
filter(meanSteps==max(meanSteps))
head(activityData)
activityData %>% filter(is.na(steps))
activityData
activityData <- read.csv('activity.csv')
head(activityData)
activityData %>% filter(is.na(steps))
nrow(activityData %>% filter(is.na(steps)))
